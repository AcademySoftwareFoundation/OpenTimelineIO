import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        classpath 'net.anshulverma.gradle:gradle-fileupload-plugin:1.0.4'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'net.anshulverma.gradle.fileupload'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    mavenCentral()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}
version = '1.0.0'
test {
    useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                srcDirs "src/main/resources", "build/natives/lib/Release"
            } else if (OperatingSystem.current().isWindows()) {
                srcDirs "src/main/resources", "build/natives/bin/Release"
            }
        }
    }
}

compileJava {
    System.setProperty("user.dir", project.projectDir.toString())
    options.compilerArgs += ["-h", file("src/main/include")]
    options.encoding = "UTF-8"
}

task compileJNI {
    dependsOn compileJava
    outputs.upToDateWhen { false }
    doLast {
        exec {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                commandLine 'sh', '-c', 'mkdir -p build/natives && cd build/natives && cmake ../.. && cmake --build . --config Release'
            } else if (OperatingSystem.current().isWindows()) {
                commandLine "cmd", "/c", 'if not exist "build\\natives" mkdir build\\natives && cd build\\natives && cmake ..\\.. && cmake --build . --config Release'
            }
        }
    }
}

clean.doFirst {
    delete fileTree('src/main/include') {
        include 'io_opentimeline_*.h'
    }
}

processResources {
    dependsOn compileJNI
}

tasks.withType(Test) {
    if (OperatingSystem.current().isLinux()) {
        systemProperty "java.library.path", "build/natives/lib/Release/Linux"
    } else if (OperatingSystem.current().isMacOsX()) {
        systemProperty "java.library.path", "build/natives/lib/Release/Darwin"
    } else if (OperatingSystem.current().isWindows()) {
        systemProperty "java.library.path", "build\\natives\\bin\\Release\\Windows"
    }
    testLogging.showStandardStreams = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
javadoc {
    options.overview = "overview.html" // relative to source root
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task nativeUpload {
    dependsOn compileJNI
    doLast {
        exec {
            if (OperatingSystem.current().isLinux()) {
                commandLine 'sh', '-c', "cmd", "/c", 'curl -T build/natives/lib/Release/Linux/jotio-' + version.toString() + '.so -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Linux/' + version.toString() + '/Linux/' + version.toString() + '/jotio-' + version.toString() + '.so &&' +
                        '-c', "cmd", "/c", 'curl -T build/natives/lib/Release/Linux/opentime.so -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Linux/' + version.toString() + '/Linux/' + version.toString() + '/opentime.so &&' +
                        '-c', "cmd", "/c", 'curl -T build/natives/lib/Release/Linux/opentimelineio.so -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Linux/' + version.toString() + '/Linux/' + version.toString() + '/opentimeline.so'
            } else if (OperatingSystem.current().isMacOsX()) {
                commandLine 'sh', '-c', "cmd", "/c", 'curl -T build/natives/lib/Release/Darwin/jotio-' + version.toString() + '.dylib -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Darwin/' + version.toString() + '/Darwin/' + version.toString() + '/jotio-' + version.toString() + '.dylib &&' +
                        '-c', "cmd", "/c", 'curl -T build/natives/lib/Release/Linux/opentime.dylib -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Linux/' + version.toString() + '/Linux/' + version.toString() + '/opentime.dylib &&' +
                        '-c', "cmd", "/c", 'curl -T build/natives/lib/Release/Linux/opentimelineio.dylib -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Linux/' + version.toString() + '/Linux/' + version.toString() + '/opentimeline.dylib'
            } else if (OperatingSystem.current().isWindows()) {
                commandLine "cmd", "/c", 'curl -T build\\natives\\bin\\Release\\Windows\\jotio-' + version.toString() + '.dll -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Windows/' + version.toString() + '/Windows/' + version.toString() + '/jotio-' + version.toString() + '.dll &&' +
                        ' curl -T build\\natives\\bin\\Release\\Windows\\opentime.dll -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Windows/' + version.toString() + '/Windows/' + version.toString() + '/opentime.dll &&' +
                        ' curl -T build\\natives\\bin\\Release\\Windows\\opentimelineio.dll -ukarthikriyer:<insert API KEY> https://api.bintray.com/content/karthikriyer/java-opentimelineio/OpenTimelineIO-Windows/' + version.toString() + '/Windows/' + version.toString() + '/opentimelineio.dll'
            }
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "Modified Apache 2.0 License"
            url "https://github.com/PixarAnimationStudios/OpenTimelineIO/blob/master/LICENSE.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "OpenTimelineIO"
            name "Contributors to the OpenTimelineIO project"
            email ""
        }
    }

    scm {
        url "https://github.com/PixarAnimationStudios/OpenTimelineIO"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'io.opentimeline'
            artifactId 'java-opentimelineio'
            version '1.0.0'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'OpenTimelineIO is an interchange format and API for editorial cut information. OTIO is not a container format for media, rather it contains information about the order and length of cuts and references to external media.')
                root.appendNode('name', 'OpenTimelineIO')
                root.appendNode('url', 'https://github.com/PixarAnimationStudios/OpenTimelineIO')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    publications = ['mavenPublication']

    pkg {
        repo = 'java-opentimelineio'
        name = 'OpenTimelineIO'
        userOrg = ''
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/KarthikRIyer/OpenTimelineIO'
        version {
            name = '1.0.0'
            desc = '1.0.0'
            released = new Date()
        }
    }

}