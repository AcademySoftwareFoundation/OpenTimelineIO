import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()
}

ext {
    env = findProperty('env') ?: 'Debug'
}

sourceSets {
    main {
        resources {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                srcDirs "src/main/resources", "build/natives/lib"
            } else if (OperatingSystem.current().isWindows()) {
                srcDirs "src/main/resources", "build/natives/bin/Release"
            }
        }
    }
}

compileJava {
    System.setProperty("user.dir", project.projectDir.toString())
    options.compilerArgs += ["-h", file("src/main/include")]
}

task compileJNI {
    dependsOn compileJava

    doLast {
        exec {
            if (OperatingSystem.current().isLinux() ||
                    OperatingSystem.current().isMacOsX() ||
                    OperatingSystem.current().isUnix()) {
                def buildCmd = 'mkdir -p build/natives && cd build/natives && cmake ../.. && cmake --build --'
                commandLine 'sh', '-c', 'mkdir -p build/natives && cd build/natives && cmake ../.. && cmake --build . --config Release'
            } else if (OperatingSystem.current().isWindows()) {
                commandLine "cmd", "/c", 'if not exist "build\\natives" mkdir build\\natives && cd build\\natives && cmake ..\\.. && cmake --build . --config Release'
            }
        }
    }
}

clean.doFirst {
    delete fileTree('src/main/include') {
        include 'io_opentimeline_*.h'
    }
}

processResources {
    dependsOn compileJNI
}

tasks.withType(Test) {
    if (OperatingSystem.current().isLinux() ||
            OperatingSystem.current().isMacOsX() ||
            OperatingSystem.current().isUnix()) {
        systemProperty "java.library.path", "build/natives/lib"
    } else if (OperatingSystem.current().isWindows()) {
        systemProperty "java.library.path", "build\\natives\\bin\\Release"
    }
    testLogging.showStandardStreams = false
}